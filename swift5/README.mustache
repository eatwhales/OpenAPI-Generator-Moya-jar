# Swift5 API client for {{{projectName}}}

{{#appDescriptionWithNewLines}}
{{{.}}}
{{/appDescriptionWithNewLines}}

## Overview
This API client was generated by the [OpenAPI Generator](https://openapi-generator.tech) project.  By using the [openapi-spec](https://github.com/OAI/OpenAPI-Specification) from a remote server, you can easily generate an API client.

- API version: {{appVersion}}
- Package version: {{packageVersion}}
{{^hideGenerationTimestamp}}
- Build date: {{generatedDate}}
{{/hideGenerationTimestamp}}
- Build package: {{generatorClass}}
{{#infoUrl}}
For more information, please visit [{{{infoUrl}}}]({{{infoUrl}}})
{{/infoUrl}}

## Installation

{{#useVapor}}
Add the following entry in your Package.swift:

> .package(path: "./{{{projectName}}}")

{{/useVapor}}
{{^useVapor}}
### Carthage

Run `carthage update`

### CocoaPods

Run `pod install`

{{/useVapor}}## Documentation for API Endpoints

All URIs are relative to *{{basePath}}*

Class | Method | HTTP request | Description
------------ | ------------- | ------------- | -------------
{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}*{{classname}}* | [**{{operationId}}**]({{apiDocPath}}{{classname}}.md#{{operationIdLowerCase}}) | **{{httpMethod}} {{#lambda.lowercase}}{{{httpMethod}}}{{/lambda.lowercase}}** {{path}} | {{summary}}
{{#lowercase}}GET{{/lowercase}}
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}



enum API { {{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}



    //{{summary}}
    case {{operationId}}({{#allParams}}{{^isHeaderParam}}{{^isBodyParam}}{{^-first}}, {{/-first}}{{/isBodyParam}}{{paramName}}: {{#isEnum}}{{#isContainer}}[{{enumName}}_{{operationId}}]{{/isContainer}}{{^isContainer}}{{enumName}}_{{operationId}}{{/isContainer}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}{{^required}}? = nil{{/required}}{{/isHeaderParam}}{{/allParams}}){{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}


    
}

extension API: TargetType {

    var path: String {
        switch self { {{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}




        //{{summary}}
        case .{{operationId}}{{#pathParams}}{{#-first}}(let {{paramName}}){{/-first}}{{/pathParams}}:
            return "{{path}}{{#pathParams}}{{#-first}}/\({{paramName}}){{/-first}}{{/pathParams}}"{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}
        }



    }

    var method: Moya.Method {
        switch self { {{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}




        //{{summary}}
        case .{{operationId}}:
            return .{{httpMethod}}{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}
        }



    }

    var task: Moya.Task {
        var params: [String: Any] = [:]
        switch self { {{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}



            //{{summary}}
            case .{{operationId}}({{#allParams}}{{^isHeaderParam}}{{^isBodyParam}}{{^-first}}, {{/-first}}{{/isBodyParam}}let {{paramName}}{{/isHeaderParam}}{{/allParams}}):
            
            {{#allParams}}{{^isHeaderParam}}{{^required}}{{^isBodyParam}}
            if let {{paramName}} {
                params["{{paramName}}"] = {{paramName}}    
            }{{/isBodyParam}}{{/required}}{{#required}}
            params["{{paramName}}"] = {{paramName}}{{/required}}{{/isHeaderParam}}{{/allParams}}
            {{#hasBodyParam}}
            {{#bodyParam}}
                return .requestJSONEncodable({{paramName}}})
             {{/bodyParam}}
            {{/hasBodyParam}}
            {{#hasFormParams}}
            return .requestParameters(parameters: params, encoding: URLEncoding.default)
            {{/hasFormParams}}

            {{^hasQueryParams}}{{^hasBodyParam}}{{^hasFormParams}}
            return .requestPlain{{/hasFormParams}}{{/hasBodyParam}}{{/hasQueryParams}}{{#hasQueryParams}}
            return .requestParameters(parameters: params, encoding: URLEncoding.default){{/hasQueryParams}}{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}




        }
    }

    var headers: [String : String]? {
        return ["Content-Type": "application/json"]
    }
}



{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}
    /**
        {{#summary}}
        {{{.}}}
        {{/summary}}
        - {{httpMethod}} {{{path}}}{{#notes}}
        - {{{.}}}{{/notes}}{{#subresourceOperation}}
        - subresourceOperation: {{.}}{{/subresourceOperation}}{{#defaultResponse}}
        - defaultResponse: {{.}}{{/defaultResponse}}{{#authMethods}}
        - {{#isBasic}}BASIC{{/isBasic}}{{#isOAuth}}OAuth{{/isOAuth}}{{#isApiKey}}API Key{{/isApiKey}}:
        - type: {{type}}{{#keyParamName}} {{keyParamName}} {{#isKeyInQuery}}(QUERY){{/isKeyInQuery}}{{#isKeyInHeader}}(HEADER){{/isKeyInHeader}}{{/keyParamName}}
        - name: {{name}}{{/authMethods}}{{#hasResponseHeaders}}
        - responseHeaders: [{{#responseHeaders}}{{{baseName}}}({{{dataType}}}){{^-last}}, {{/-last}}{{/responseHeaders}}]{{/hasResponseHeaders}}{{#externalDocs}}
        - externalDocs: {{.}}{{/externalDocs}}{{#allParams}}{{^isHeaderParam}}
        - parameter {{paramName}}: ({{#isFormParam}}form{{/isFormParam}}{{#isQueryParam}}query{{/isQueryParam}}{{#isPathParam}}path{{/isPathParam}}{{#isHeaderParam}}header{{/isHeaderParam}}{{#isBodyParam}}body{{/isBodyParam}}) {{description}} {{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{/isHeaderParam}} {{/allParams}}
        - returns: {{{returnType}}}{{#returnType}}{{#isResponseOptional}}?{{/isResponseOptional}}{{/returnType}}{{^returnType}}Void{{/returnType}} {{description}}
    */
    func {{operationId}}({{#allParams}}{{^isHeaderParam}}{{^isBodyParam}}{{^-first}}, {{/-first}}{{/isBodyParam}}{{paramName}}: {{#isEnum}}{{#isContainer}}[{{enumName}}_{{operationId}}]{{/isContainer}}{{^isContainer}}{{enumName}}_{{operationId}}{{/isContainer}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}{{^required}}? = nil{{/required}}{{/isHeaderParam}}{{/allParams}}) -> Observable<{{{returnType}}}{{#returnType}}{{#isResponseOptional}}?{{/isResponseOptional}}{{/returnType}}{{^returnType}}Void{{/returnType}}{{description}}> {
        return apiService.rx.request(<#api#>.{{operationId}}({{#allParams}}{{^isHeaderParam}}{{^isBodyParam}}{{^-first}}, {{/-first}}{{/isBodyParam}}{{paramName}}: {{paramName}}{{/isHeaderParam}}{{/allParams}}).asMultiTarget)
            .asObservable()
            .authHandler()
            .filterSuccessfulStatusAndRedirectCodes()
            .map({{{returnType}}}{{#returnType}}{{#isResponseOptional}}?{{/isResponseOptional}}{{/returnType}}{{^returnType}}Void{{/returnType}}{{description}}.self)
            .subscribe(on: ConcurrentDispatchQueueScheduler(qos: .default))
            .observe(on: MainScheduler.instance)
    }
  {{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}






## Documentation For Models

{{#models}}{{#model}} - [{{{classname}}}]({{modelDocPath}}{{{classname}}}.md)
{{/model}}{{/models}}

## Documentation For Authorization

{{^authMethods}} All endpoints do not require authorization.
{{/authMethods}}{{#authMethods}}{{#last}} Authentication schemes defined for the API:{{/last}}{{/authMethods}}
{{#authMethods}}## {{{name}}}

{{#isApiKey}}- **Type**: API key
- **API key parameter name**: {{{keyParamName}}}
- **Location**: {{#isKeyInQuery}}URL query string{{/isKeyInQuery}}{{#isKeyInHeader}}HTTP header{{/isKeyInHeader}}
{{/isApiKey}}
{{#isBasic}}- **Type**: HTTP basic authentication
{{/isBasic}}
{{#isOAuth}}- **Type**: OAuth
- **Flow**: {{{flow}}}
- **Authorization URL**: {{{authorizationUrl}}}
- **Scopes**: {{^scopes}}N/A{{/scopes}}
{{#scopes}} - **{{{scope}}}**: {{{description}}}
{{/scopes}}
{{/isOAuth}}

{{/authMethods}}

## Author

{{#apiInfo}}{{#apis}}{{#-last}}{{infoEmail}}
{{/-last}}{{/apis}}{{/apiInfo}}
